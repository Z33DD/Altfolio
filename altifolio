#!/usr/bin/env python3

from pycoingecko import CoinGeckoAPI
from time import time, ctime, gmtime, strftime
from tinydb import TinyDB, Query
from rich.console import Console
from rich.table import  Table
import argparse
import csv


db = TinyDB('db.json')


def get_parser():
    parser = argparse.ArgumentParser(description='Track bitcoin profits')
    parser.add_argument("--add", action="store_true")
    parser.add_argument("--remove", action="store_true")
    parser.add_argument("--export", action="store_true")
    return parser.parse_args()

def profit(btc, fiat, current_price):
    new_fiat = float(btc) * current_price
    profit = new_fiat - float(fiat)
    return profit

def add(btc, fiat):
    cur_time = ctime(time())
    price = float(fiat)/float(btc)
    db.insert({'date':cur_time, 'price':price, 'btc':float(btc), 'fiat':float(fiat)})

def remove(arg, value):
    arg_list = ['date', 'price', 'btc', 'fiat']
    console = Console()
    entry = Query()
    if not arg in arg_list:
        console.print("Error! Argumment is not a valid argument!", style="bold red")
        console.print("Valid Argumments: ", style="bold red")
        console.print(arg_list, style='bold green')
        exit(-1)
    
    if arg == 'date':
        query = entry.date == value
    elif arg == 'price':
        query = entry.price == float(value)
    elif arg == 'btc':
        query = entry.btc == float(value)
    elif arg == 'fiat':
        query = entry.fiat == float(value)
    
    db.remove(query)

def print_all():
    cs = Console()

    table = Table(title="Bitcoin Profits - {}".format(ctime(time())), \
        show_header=True, header_style="bold cyan")
    current_price = CoinGeckoAPI().get_price(ids='bitcoin',\
        vs_currencies='brl')['bitcoin']['brl']

    header = ('Price', 'Bitcoin', 'Fiat', 'Profit')
    
    table.add_column('Date', style="dim")
    for i in header:
        table.add_column(i)

    for entry in db.all():
        prof = profit(entry['btc'], entry['fiat'], current_price)
        if prof < 0:
            entry.update({'profit': "[red]{:0.2f}[/red]".format(prof)})
        else:
            entry.update({'profit': "[green]{:0.2f}[/green]".format(prof)})

        
        l = []
        for i, j in entry.items():
            if i in ['fiat', 'price']:
                l.append("{:0.2f}".format(j))
            else:
                l.append(str(j))

        table.add_row(*tuple(l))

    cs.print(table)

def export():
    current_price = CoinGeckoAPI().get_price(ids='bitcoin',\
            vs_currencies='brl')['bitcoin']['brl']
    header = ['date', 'price', 'btc', 'fiat', 'profit']
    filename = "./Exports/" + strftime("%Y_%m_%d", gmtime()) + '.csv'

    with open(filename, 'w') as file:
        w = csv.DictWriter(file, header)
        w.writeheader()
        for entry in db:
            prof = profit(entry['btc'], entry['fiat'], current_price)
            entry.update({'profit': "{:0.2f}".format(prof)})
            w.writerow(entry)

if __name__ == "__main__":
    args = get_parser()
    console = Console()

    if args.add:
        btc = input("Bitcoin: ")
        fiat = input("Fiat:")
        add(btc, fiat)
        console.print("Done!", style='italic green')
        exit()
    
    elif args.remove:
        arg = input("Argumment: ")
        value = input("Value: ")
        remove(arg, value)
        console.print("Done!", style='italic green')
        exit()
    
    elif args.export:
        export()
        console.print("Done!", style='italic green')
        exit()

    else:
        print_all()
        exit()
